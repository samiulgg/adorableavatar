{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardArray","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","overflowX","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","intialStateSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93b110e1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ( { name , email , id } ) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-blue dib br3 pa1 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img src={`https://api.adorable.io/avatars/300/${id}`} alt=\"robots\"/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2 className=\"red\">{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\tconst cardArray = robots.map((user, i) => {\r\n\t\treturn (\r\n\t\t\t<Card \r\n\t\t\tkey={i} \r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email} \r\n\t\t\t/>\r\n\t\t);\r\n\t})\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{cardArray}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\" >\r\n\t\t\t<input \r\n\t\t\tclassName='pa3 ba b--blue bg-lightest-blue w-20'\r\n\t\t\ttype=\"search\"\r\n\t\t\tplaceholder='search avatar'\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow:'scroll', overflowX:'hidden', height: '500px' }}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;","import React , { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error , info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render(){\r\n    if (this.state.hasError) {\r\n      return <h1>Missing Details</h1>\r\n    } else {\r\n      return this.props.children\r\n    }\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css'\r\nimport { setSearchField , requestRobots } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots()\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField , onSearchChange , robots , isPending } = this.props;\r\n\t\tconst filterRobots = robots.filter(robots => {\r\n\t\t\treturn robots.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending ?\r\n\t\t<h1>Loading</h1>\r\n\t\t: \r\n\t\t(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>Adorable Avatar</h1>\r\n\t\t\t\t<SearchBox searchChange={ onSearchChange }/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList robots={filterRobots}/>\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({type: REQUEST_ROBOTS_PENDING});\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\r\n\r\nconst intialStateSearch = {\r\n  searchField: ''\r\n}\r\nexport const searchRobots = (state=intialStateSearch , action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst intialStateRobots = {\r\n  isPending: true,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state=intialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: false})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload})\r\n    default:\r\n      return state\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = (createLogger())\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n                <Provider store={store}>\n                  <App />\n                </Provider>\n                , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}